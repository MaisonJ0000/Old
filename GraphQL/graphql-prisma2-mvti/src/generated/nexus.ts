/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */





declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  MovieCreateOneWithoutReviewsInput: { // input type
    connect?: NexusGenInputs['MovieWhereUniqueInput'] | null; // MovieWhereUniqueInput
    create?: NexusGenInputs['MovieCreateWithoutReviewsInput'] | null; // MovieCreateWithoutReviewsInput
  }
  MovieCreateWithoutReviewsInput: { // input type
    createdAt?: any | null; // DateTime
    poster?: string | null; // String
    title: string; // String!
    updatedAt?: any | null; // DateTime
  }
  MovieWhereUniqueInput: { // input type
    id?: number | null; // Int
  }
  ReviewCreateManyWithoutAuthorInput: { // input type
    connect?: NexusGenInputs['ReviewWhereUniqueInput'][] | null; // [ReviewWhereUniqueInput!]
    create?: NexusGenInputs['ReviewCreateWithoutAuthorInput'][] | null; // [ReviewCreateWithoutAuthorInput!]
  }
  ReviewCreateWithoutAuthorInput: { // input type
    createdAt?: any | null; // DateTime
    movie: NexusGenInputs['MovieCreateOneWithoutReviewsInput']; // MovieCreateOneWithoutReviewsInput!
    rating?: number | null; // Int
    text?: string | null; // String
    updatedAt?: any | null; // DateTime
  }
  ReviewWhereUniqueInput: { // input type
    id?: number | null; // Int
  }
  UserCreateInput: { // input type
    createdAt?: any | null; // DateTime
    email: string; // String!
    name?: string | null; // String
    password: string; // String!
    reviews?: NexusGenInputs['ReviewCreateManyWithoutAuthorInput'] | null; // ReviewCreateManyWithoutAuthorInput
    updatedAt?: any | null; // DateTime
  }
  UserWhereUniqueInput: { // input type
    email?: string | null; // String
    id?: number | null; // Int
  }
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  Movie: { // root type
    id: number; // Int!
    poster?: string | null; // String
    title: string; // String!
  }
  Mutation: {};
  Query: {};
  Review: { // root type
    id: number; // Int!
    rating?: number | null; // Int
    text?: string | null; // String
  }
  User: { // root type
    email: string; // String!
    id: number; // Int!
    name?: string | null; // String
  }
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  DateTime: any;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  MovieCreateOneWithoutReviewsInput: NexusGenInputs['MovieCreateOneWithoutReviewsInput'];
  MovieCreateWithoutReviewsInput: NexusGenInputs['MovieCreateWithoutReviewsInput'];
  MovieWhereUniqueInput: NexusGenInputs['MovieWhereUniqueInput'];
  ReviewCreateManyWithoutAuthorInput: NexusGenInputs['ReviewCreateManyWithoutAuthorInput'];
  ReviewCreateWithoutAuthorInput: NexusGenInputs['ReviewCreateWithoutAuthorInput'];
  ReviewWhereUniqueInput: NexusGenInputs['ReviewWhereUniqueInput'];
  UserCreateInput: NexusGenInputs['UserCreateInput'];
  UserWhereUniqueInput: NexusGenInputs['UserWhereUniqueInput'];
}

export interface NexusGenFieldTypes {
  Movie: { // field return type
    id: number; // Int!
    poster: string | null; // String
    reviews: NexusGenRootTypes['Review'][]; // [Review!]!
    title: string; // String!
  }
  Mutation: { // field return type
    createOneUser: NexusGenRootTypes['User']; // User!
  }
  Query: { // field return type
    movie: NexusGenRootTypes['Movie'] | null; // Movie
    user: NexusGenRootTypes['User'] | null; // User
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  Review: { // field return type
    author: NexusGenRootTypes['User']; // User!
    id: number; // Int!
    movie: NexusGenRootTypes['Movie']; // Movie!
    rating: number | null; // Int
    text: string | null; // String
  }
  User: { // field return type
    email: string; // String!
    id: number; // Int!
    name: string | null; // String
    reviews: NexusGenRootTypes['Review'][]; // [Review!]!
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createOneUser: { // args
      data: NexusGenInputs['UserCreateInput']; // UserCreateInput!
    }
  }
  Query: {
    movie: { // args
      where: NexusGenInputs['MovieWhereUniqueInput']; // MovieWhereUniqueInput!
    }
    user: { // args
      where: NexusGenInputs['UserWhereUniqueInput']; // UserWhereUniqueInput!
    }
    users: { // args
      skip?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Movie" | "Mutation" | "Query" | "Review" | "User";

export type NexusGenInputNames = "MovieCreateOneWithoutReviewsInput" | "MovieCreateWithoutReviewsInput" | "MovieWhereUniqueInput" | "ReviewCreateManyWithoutAuthorInput" | "ReviewCreateWithoutAuthorInput" | "ReviewWhereUniqueInput" | "UserCreateInput" | "UserWhereUniqueInput";

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "DateTime" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}