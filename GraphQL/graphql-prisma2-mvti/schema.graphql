### This file was generated by Nexus Schema
### Do not make changes to this file directly


scalar DateTime

type Movie {
  id: Int!
  poster: String
  reviews: [Review!]!
  title: String!
}

input MovieCreateOneWithoutReviewsInput {
  connect: MovieWhereUniqueInput
  create: MovieCreateWithoutReviewsInput
}

input MovieCreateWithoutReviewsInput {
  createdAt: DateTime
  poster: String
  title: String!
  updatedAt: DateTime
}

input MovieWhereUniqueInput {
  id: Int
}

type Mutation {
  createOneUser(data: UserCreateInput!): User!
}

type Query {
  movie(where: MovieWhereUniqueInput!): Movie
  user(where: UserWhereUniqueInput!): User
  users(skip: Int): [User!]!
}

type Review {
  author: User!
  id: Int!
  movie: Movie!
  rating: Int
  text: String
}

input ReviewCreateManyWithoutAuthorInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutAuthorInput!]
}

input ReviewCreateWithoutAuthorInput {
  createdAt: DateTime
  movie: MovieCreateOneWithoutReviewsInput!
  rating: Int
  text: String
  updatedAt: DateTime
}

input ReviewWhereUniqueInput {
  id: Int
}

type User {
  email: String!
  id: Int!
  name: String
  reviews: [Review!]!
}

input UserCreateInput {
  createdAt: DateTime
  email: String!
  name: String
  password: String!
  reviews: ReviewCreateManyWithoutAuthorInput
  updatedAt: DateTime
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
