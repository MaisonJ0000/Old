### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Comment {
  author: User!
  id: Int!
  post: Post!
  text: String
}

input CommentCreateInput {
  author: UserCreateOneWithoutCommentInput!
  createdAt: DateTime
  post: PostCreateOneWithoutCommentsInput!
  text: String
  updatedAt: DateTime
}

input CommentCreateManyWithoutAuthorInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutAuthorInput!]
}

input CommentCreateManyWithoutPostInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutPostInput!]
}

input CommentCreateWithoutAuthorInput {
  createdAt: DateTime
  post: PostCreateOneWithoutCommentsInput!
  text: String
  updatedAt: DateTime
}

input CommentCreateWithoutPostInput {
  author: UserCreateOneWithoutCommentInput!
  createdAt: DateTime
  text: String
  updatedAt: DateTime
}

input CommentWhereUniqueInput {
  id: Int
}

scalar DateTime

type Mutation {
  createOneComment(data: CommentCreateInput!): Comment!
  createOnePost(data: PostCreateInput!): Post!
  createOneUser(data: UserCreateInput!): User!
}

type Post {
  comments: [Comment!]!
  id: Int!
  title: String!
}

input PostCreateInput {
  comments: CommentCreateManyWithoutPostInput
  createdAt: DateTime
  title: String!
  updatedAt: DateTime
  User: UserCreateOneWithoutPostsInput
}

input PostCreateManyWithoutUserInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutUserInput!]
}

input PostCreateOneWithoutCommentsInput {
  connect: PostWhereUniqueInput
  create: PostCreateWithoutCommentsInput
}

input PostCreateWithoutCommentsInput {
  createdAt: DateTime
  title: String!
  updatedAt: DateTime
  User: UserCreateOneWithoutPostsInput
}

input PostCreateWithoutUserInput {
  comments: CommentCreateManyWithoutPostInput
  createdAt: DateTime
  title: String!
  updatedAt: DateTime
}

input PostWhereUniqueInput {
  id: Int
}

type Query {
  comment(where: CommentWhereUniqueInput!): Comment
  comments(skip: Int): [Comment!]!
  post(where: PostWhereUniqueInput!): Post
  posts(skip: Int): [Post!]!
  user(where: UserWhereUniqueInput!): User
  users(skip: Int): [User!]!
}

type User {
  email: String!
  id: Int!
  name: String
  posts: [Post!]!
}

input UserCreateInput {
  Comment: CommentCreateManyWithoutAuthorInput
  createdAt: DateTime
  email: String!
  name: String
  posts: PostCreateManyWithoutUserInput
  updatedAt: DateTime
}

input UserCreateOneWithoutCommentInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCommentInput
}

input UserCreateOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPostsInput
}

input UserCreateWithoutCommentInput {
  createdAt: DateTime
  email: String!
  name: String
  posts: PostCreateManyWithoutUserInput
  updatedAt: DateTime
}

input UserCreateWithoutPostsInput {
  Comment: CommentCreateManyWithoutAuthorInput
  createdAt: DateTime
  email: String!
  name: String
  updatedAt: DateTime
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
